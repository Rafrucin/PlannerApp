@page "/plans/details/{id}"
@attribute [Authorize]
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager
@inject PlansService plansService
@inject ToDoItemService itemService

@if (model == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Edit @model.Title</h2>

    <div class="row">
        <div class="col-6">
            <EditForm Model="model" OnValidSubmit="async () => await EditPlanAsync()">
                <RadzenCard>
                    <Alertmessage Message="@message" MessageType="@messageType" />
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <RadzenTextBox Placeholder="Title" class="m-2" @bind-Value="model.Title" />
                    <RadzenTextArea Placeholder="Description" class="m-2" @bind-Value="model.Description" />
                    <input type="file" class="m-2" @ref="inputReference" @onchange="async () => await ChooseFileAsync()" />
                    <img style="width:100%; margin:10px" src="@imageContent" />
                    <hr />
                    <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Light" Style="margin:5px" class="btn-block" Disabled="IsBusy" Text="Submit" />

                </RadzenCard>
            </EditForm>
        </div>
        <div class="col-6">
            <RadzenCard>
                <h2>Plan's tasks</h2>
                <Alertmessage Message="@messageItem" MessageType="Models.AlertMessageType.Error" />
                <EditForm Model="itemModel" OnValidSubmit="async()=> await submitItemFormAsync()">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <table>
                        <tr>
                            <td>
                                <RadzenButton Text="*" Click="clearSelection" ButtonStyle="Radzen.ButtonStyle.Info" ButtonType="Radzen.ButtonType.Button" Disabled="IsBusy" class="m-1 btn-sm" />
                            </td>
                            <td>
                                <RadzenTextBox Placeholder="Item Descriptipn ...." @bind-Value="itemModel.Description" class="m-1" />
                            </td>
                            <td>
                                <RadzenButton Text="Submit" ButtonStyle="Radzen.ButtonStyle.Primary" ButtonType="Radzen.ButtonType.Submit" Disabled="IsBusy" class="m-1 btn-sm" />
                            </td>
                        </tr>
                        @foreach (var item in items)
                        {
                            string descriptionStyle = item.IsDone ? "text-decoration-line: line-through" : "text-decoration-line: none";
                            string rowStyle = selectedItem == item ? "cursor:pointer; background:lightblue" : "cursor:pointer; background:white";
                            <tr style="@rowStyle" @onclick="()=>selectItem(item)">
                                <td>
                                    <RadzenCheckBox @bind-Value="item.IsDone" @onclick="async()=> await ChangeItemStatusAsync(item.Id)" class="m-1" />
                                </td>
                                <td>
                                    <span style="@descriptionStyle" class="m-1">@item.Description</span>
                                </td>
                                <td>
                                    <RadzenButton Text="x" ButtonStyle="Radzen.ButtonStyle.Danger" Click="async () =>await RemoveItem(item)" ButtonType="Radzen.ButtonType.Button" Disabled="IsBusy" class="m-1 btn-sm" />
                                </td>
                            </tr>
                        }
                    </table>
                </EditForm>
            </RadzenCard>
        </div>
    </div>
}
    @code {

        [Parameter]
        public string Id { get; set; }

        PlanRequest model = new PlanRequest();
        System.IO.Stream fileStream = null;
        string imageContent = string.Empty;
        string imageBuffor = string.Empty;
        string fileName = string.Empty;
        bool IsBusy = false;
        [CascadingParameter]
        private Task<AuthenticationState> authenticationState { get; set; }

        //Alert
        Models.AlertMessageType messageType = Models.AlertMessageType.Success;
        string message = string.Empty;
        string messageItem = string.Empty;

        ElementReference inputReference;


        async Task ChooseFileAsync()
        {
            message = string.Empty;


            var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

            if (file == null)
            {
                imageContent = imageBuffor;
                return;
            }

            var fileInfo = await file.ReadFileInfoAsync();

            string extension = System.IO.Path.GetExtension(fileInfo.Name);
            var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };
            if (!allowedExtensions.Contains(extension))
            {
                message = "The chosen file is not Vali image type";
                messageType = Models.AlertMessageType.Error;
                imageContent = string.Empty;
                return;
            }

            using (var memoryStream = await file.CreateMemoryStreamAsync())
            {
                fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
                fileName = fileInfo.Name;
                imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
            }
        }

        async Task EditPlanAsync()
        {
            IsBusy = true;



            model.CoverFile = fileStream;
            model.FileName = fileName;
            var result = await plansService.EditPlanAsync(model);

            if (result.isSuccess)
            {
                message = "Plan updated successfully";
                messageType = Models.AlertMessageType.Success;
            }
            else
            {
                message = result.message;
                messageType = Models.AlertMessageType.Error;
            }

            IsBusy = false;
        }

        async Task GetPlanByIdAsync()
        {
            IsBusy = true;

            var result = await plansService.GetPlanByIdAsync(Id);
            if (result.isSuccess)
            {
                model.Title = result.Record.Title;
                model.Description = result.Record.Description;
                imageContent = result.Record.CoverPath;
                imageBuffor = result.Record.CoverPath;
                model.Id = Id;
                items = result.Record.ToDoItems.ToList();

            }
            else
            {
                message = result.message;
                messageType = Models.AlertMessageType.Error;
            }

            IsBusy = false;
        }

        protected async override Task OnInitializedAsync()
        {
            var userState = authenticationState.Result;
            plansService.AccessToken = userState.User.FindFirst("AccessToken").Value;
            itemService.AccessToken = userState.User.FindFirst("AccessToken").Value;

            await GetPlanByIdAsync();
        }

        #region

        List<ToDoItem> items = new List<ToDoItem>();
        ToDoItem selectedItem = null;

        ToDoItemRequest itemModel = new ToDoItemRequest();

        async Task InsertItem()
        {
            IsBusy = true;

            itemModel.PlanId = Id;

            var result = await itemService.CreateItemAsync(itemModel);

            if (result.isSuccess)
            {
                items.Add(result.Record);
            }
            else
            {
                messageItem = result.message;
            }

            IsBusy = false;

        }

        async Task EditItemAsync()
        {
            IsBusy = true;

            itemModel.PlanId = Id;

            var result = await itemService.EditItemAsync(itemModel);

            if (result.isSuccess)
            {
                var editedItem = items.SingleOrDefault(i => i.Id == result.Record.Id);
                editedItem.Description = result.Record.Description;
            }
            else
            {
                messageItem = result.message;
            }

            IsBusy = false;

        }

        async Task submitItemFormAsync()
        {
            if (selectedItem == null)
            {
                await InsertItem();
            }
            else
            {
                await EditItemAsync();
            }
        }

        async Task ChangeItemStatusAsync(string itemId)
        {
            IsBusy = true;
            var result = await itemService.ChangeItemStateAsync(itemId);
            if (!result.isSuccess)
            {
                messageItem = result.message;
            }
            IsBusy = false;
        }

        void selectItem (ToDoItem item)
        {
            selectedItem = item;
            itemModel.Id = item.Id;
            itemModel.Description = item.Description;
            if (item.IsDone)
            {
                messageItem = "Checked cannot be edited";
            }
            else
            {
                messageItem = null;
            }
        }

        void clearSelection()
        {
            selectedItem = null;
            itemModel.Id = null;
            itemModel.Description = null;
        }

        async Task RemoveItem(ToDoItem item)
        {
            IsBusy = true;

            var result = await itemService.DeleteItemAsync(item.Id);
            if (result.isSuccess)
            {
                items.Remove(item);
            }
            else
            {
                messageItem = result.message;
            }

            IsBusy = false;
        }

        #endregion
    }
