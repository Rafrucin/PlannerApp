@page "/plans/details/{id}"
@attribute [Authorize]
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager
@inject PlansService plansService

<h2>Edit @model.Title</h2>

<div class="row">
    <div class="col-6">
        <EditForm Model="model" OnValidSubmit="async()=>await EditPlanAsync()">
            <RadzenCard>
                <Alertmessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <RadzenTextBox Placeholder="Title" class="m-2" @bind-Value="model.Title" />
                <RadzenTextArea Placeholder="Description" class="m-2" @bind-Value="model.Description" />
                <input type="file" class="m-2" @ref="inputReference" @onchange="async()=> await ChooseFileAsync()" />
                <img style="width:100%; margin:10px" src="@imageContent" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Light" Style="margin:5px" class="btn-block" Disabled="IsBusy" Text="Submit" />

            </RadzenCard>
        </EditForm>
    </div>
    <div class="col-6"> 
        <RadzenCard>
               <h2>Plan's tasks</h2>
        </RadzenCard>        
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string imageBuffor = string.Empty;
    string fileName = string.Empty;
    bool IsBusy = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    //Alert
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;
    string message = string.Empty;

    ElementReference inputReference;


    async Task ChooseFileAsync()
    {
        message = string.Empty;
        

        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
        {
            imageContent = imageBuffor;
            return;
        }

        var fileInfo = await file.ReadFileInfoAsync();

        string extension = System.IO.Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };
        if (!allowedExtensions.Contains(extension))
        {
            message = "The chosen file is not Vali image type";
            messageType = Models.AlertMessageType.Error;
            imageContent = string.Empty;
            return;
        }

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            fileName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    async Task EditPlanAsync()
    {
        IsBusy = true;



        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await plansService.EditPlanAsync(model);

        if (result.isSuccess)
        {
            message = "Plan updated successfully";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.message;
            messageType = Models.AlertMessageType.Error;
        }

        IsBusy = false;
    }

    async Task GetPlanByIdAsync()
    {
        IsBusy = true;

        var result = await plansService.GetPlanByIdAsync(Id);
        if (result.isSuccess)
        {
            model.Title = result.Record.Title;
            model.Description = result.Record.Description;
            imageContent = result.Record.CoverPath;
            imageBuffor = result.Record.CoverPath;
            model.Id = Id;
            
        }
        else
        {
            message = result.message;
            messageType = Models.AlertMessageType.Error;
        }

        IsBusy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        plansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        await GetPlanByIdAsync();
    }
}
