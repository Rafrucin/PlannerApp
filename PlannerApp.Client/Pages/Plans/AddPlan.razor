@page "/plans/add"
@attribute [Authorize]
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager
@inject PlansService plansService

<h3>Add new plan</h3>

<div class="row">
    <div class="col-6">
        <EditForm Model="model" OnValidSubmit="async()=>await PostPlanAsync()">
            <RadzenCard>
                 <Alertmessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <RadzenTextBox Placeholder="Title" class="m-2" @bind-Value="model.Title" />
                <RadzenTextArea Placeholder="Description" class="m-2"@bind-Value="model.Description" />
                <input type="file" class="m-2" @ref="inputReference" @onchange="async()=> await ChooseFileAsync()"/>
                <img style="width:100%; margin:10px" src="@imageContent" />
                <hr/>
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Light" Style="margin:5px" class="btn-block" Disabled="IsBusy" Text="Submit"/>

            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {

    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;
    bool IsBusy = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    //Alert
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;
    string message = string.Empty;

    ElementReference inputReference;


    async Task ChooseFileAsync()
    {
        message = string.Empty;

        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file==null)
        {
            imageContent = string.Empty;
            return;
        }

        var fileInfo = await file.ReadFileInfoAsync();

        string extension = System.IO.Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };
        if(!allowedExtensions.Contains(extension))
        {
            message = "The chosen file is not Vali image type";
            messageType = Models.AlertMessageType.Error;
            imageContent = string.Empty;
            return;
        }

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            fileName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    async Task PostPlanAsync()
    {
        IsBusy = true;

        if (string.IsNullOrWhiteSpace(fileName))
        {
            message = "Please add a cover picture";
            messageType = Models.AlertMessageType.Error;
            IsBusy = false;
            return;
        }

        var userState = authenticationState.Result;



        plansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await plansService.PostPlanAsync(model);

        if (result.isSuccess)
        {
            navigationManager.NavigateTo("/Plans");
        }
        else
        {
            message = result.message;
            messageType = Models.AlertMessageType.Error;
        }


        IsBusy = false;
    }
}
