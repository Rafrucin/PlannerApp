@page "/auth/register"
@layout AuthLayout
@using PlannerApp.Shared.Models

@inject AuthenticationService authService 
@inject NavigationManager navigation


<div class="row">
    <div class="col-12">
        <h2>Create a new account</h2>

        <EditForm Model="model" OnValidSubmit="RegisterUser">
            <RadzenCard>
                <Alertmessage Message="@message" MessageType="@messageType" />

                <DataAnnotationsValidator />
                <ValidationSummary />


                <label>First Name</label>
                <RadzenTextBox @bind-Value="model.FirstName"></RadzenTextBox>

                <label>Last Name</label>
                <RadzenTextBox @bind-Value="model.LastName"></RadzenTextBox>

                <label>Email Address</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <label>Confirm Password</label>
                <RadzenPassword @bind-Value="model.ConfirmPassword"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2" Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Login" 
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" Disabled="isBusy" Click="GoToLogin"/>

            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    RegisterRequestModel model = new RegisterRequestModel();

    bool isBusy = false;

    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    string message = string.Empty;

    public async Task RegisterUser()
    {
        isBusy = true;

        var result = await authService.RegisterUserAsync(model);
        if (result.IsSuccess)
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Errors.FirstOrDefault()??result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    void GoToLogin()
    {
        navigation.NavigateTo("/auth/login");
    }
}
