@page "/auth/login"
@layout AuthLayout
@using PlannerApp.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigation
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider autenticationStateProvide


<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>

        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <Alertmessage Message="@message" MessageType="@messageType" />


                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email Address</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2" Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" Disabled="isBusy" Click="GoToRegister" />

            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();

    bool isBusy = false;

    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    string message = string.Empty;

    Dictionary<string, string> userInfo = new Dictionary<string, string>();

    public async Task LoginUser()
    {
        isBusy = true;

        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {

            var userInfo = new PlannerApp.Client.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
            };

            await storageService.SetItemAsync("user", userInfo);
            await autenticationStateProvide.GetAuthenticationStateAsync();
            navigation.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    void GoToRegister()
    {
        navigation.NavigateTo("/auth/register");
    }
}
